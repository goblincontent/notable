AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway integration with CalendarTest Lambda function for calendar event extraction'

Parameters:
  LambdaFunctionName:
    Type: String
    Default: CalendarTest
    Description: Name of the existing Lambda function
  StageName:
    Type: String
    Default: prod
    Description: API Gateway deployment stage name

Resources:
  # API Gateway REST API
  CalendarEventAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: CalendarEventAPI
      Description: API for extracting calendar events from text
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Resource - this creates the /calendar-event path
  CalendarEventResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CalendarEventAPI
      ParentId: !GetAtt CalendarEventAPI.RootResourceId
      PathPart: calendar-event

  # POST Method
  CalendarEventMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CalendarEventAPI
      ResourceId: !Ref CalendarEventResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionName.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: |
            {
              "text": $input.json('$.text')
            }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: CalendarEventMethod
    Properties:
      RestApiId: !Ref CalendarEventAPI
      StageName: !Ref StageName

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref CalendarEventAPI
      StageName: !Ref StageName

  # Enable CORS for the API
  CalendarEventCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'
      ResourceId: !Ref CalendarEventResource
      RestApiId: !Ref CalendarEventAPI

  # Lambda Permission - Allow API Gateway to invoke Lambda
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionName
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CalendarEventAPI}/*

Outputs:
  ApiURL:
    Description: "URL of the API endpoint"
    Value: !Sub https://${CalendarEventAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/calendar-event
  
  ApiId:
    Description: "API Gateway REST API ID"
    Value: !Ref CalendarEventAPI
  
  ApiStage:
    Description: "API Gateway Stage"
    Value: !Ref StageName
